const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Patient", function () {
  let patientContract;
  let admin, patient1;

  beforeEach(async () => {
    [admin, patient1] = await ethers.getSigners();
    const Patient = await ethers.getContractFactory("Patient");
    patientContract = await Patient.connect(admin).deploy();
    await patientContract.waitForDeployment();
  });

  it("should register a patient", async function () {
    await patientContract.connect(admin).registerPatient(patient1.address, "Doe", "John", "123 Street");
    const isAuthorized = await patientContract.isAutorized(patient1.address);
    expect(isAuthorized).to.be.true;
  });

  it("should allow an authorized patient to report a medical error", async function () {
    await patientContract.connect(admin).registerPatient(patient1.address, "Doe", "John", "123 Street");
    await patientContract.connect(patient1).reportMedicalError(1, "Severe medical error");

    const errors = await patientContract.getErrorByHopital(1);
    expect(errors.length).to.equal(1);
    expect(errors[0].description).to.equal("Severe medical error");
    expect(errors[0].idPatient).to.equal(patient1.address);
  });

  it("should revoke a registered patient", async function () {
    await patientContract.connect(admin).registerPatient(patient1.address, "Doe", "John", "123 Street");
    await patientContract.connect(admin).revokePatient(patient1.address);
    const isAuthorized = await patientContract.isAutorized(patient1.address);
    expect(isAuthorized).to.be.false;
  });

  it("should not allow unauthorized patient to report an error", async function () {
    await expect(
      patientContract.connect(patient1).reportMedicalError(1, "Should not work")
    ).to.be.revertedWith("You are not allowed!");
  });

  it("should store multiple errors and filter them by hospital", async function () {
    await patientContract.connect(admin).registerPatient(patient1.address, "Doe", "John", "123 Street");

    await patientContract.connect(patient1).reportMedicalError(1, "Error 1");
    await patientContract.connect(patient1).reportMedicalError(2, "Error 2");
    await patientContract.connect(patient1).reportMedicalError(1, "Error 3");

    const errorsForHospital1 = await patientContract.getErrorByHopital(1);
    const errorsForHospital2 = await patientContract.getErrorByHopital(2);

    expect(errorsForHospital1.length).to.equal(2);
    expect(errorsForHospital1[0].description).to.equal("Error 1");
    expect(errorsForHospital1[1].description).to.equal("Error 3");

    expect(errorsForHospital2.length).to.equal(1);
    expect(errorsForHospital2[0].description).to.equal("Error 2");
  });
});
